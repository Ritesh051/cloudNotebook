sudo mongod --dbpath=/Users/ritesh/data/db


//password confirmation
body('passwordConfirmation')
        .custom((value, { req }) => {
          if (value !== req.body.password) {
            throw new Error('Password confirmation does not match password');
          }
          return true;
        }),
        




        const express = require('express');
const User = require('../models/User');
const router = express.Router();
const { body, validationResult } = require('express-validator');

router.post(
    '/createuser',
    [
      body('name').notEmpty().withMessage('Name is empty'),
      body('email')
        .isEmail().withMessage('Invalid email format')
        .isLength({ min: 6, max: 100 }).withMessage('Please enter a valid email.')
        .notEmpty().withMessage('Email is empty')
        .custom(async value => {
          const user = await UserCollection.findUserByEmail(value);
          if (user) {
            throw new Error('E-mail already in use');
          }
          return true;
        }),
      body('password')
        .isLength({ min: 6 }).withMessage('Password must be at least 6 characters long')
        .notEmpty().withMessage('Please enter the password'),
    ],
    async (req, res) => {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }
  
      try {
        const user = await User.create({
          username: req.body.name,
          email: req.body.email,
          password: req.body.password,
        });
        res.status(201).json({ message: 'User created successfully', user });
      } catch (error) {
        res.status(500).json({ error: 'Server error' });
      }
    }
  );
  
  module.exports = router;


  // res.status(201).json({ message: 'User created successfully', user });


  , { expiresIn: '1h' } // expires the auth-token in 1hr


  const mongoose = require('mongoose');
require('dotenv').config();

const mongoURI = process.env.MONGO_URI;

const connectToMongo = async () => {
  try {
    await mongoose.connect(mongoURI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log("Connected to MongoDB successfully!");
  } catch (err) {
    console.error("Failed to connect to MongoDB", err);
    process.exit(1);
  }
};

module.exports = connectToMongo;
